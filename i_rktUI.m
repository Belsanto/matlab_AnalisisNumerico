% rungeKuttaUI:
% Funci√≥n principal para crear la interfaz de usuario (UI) del m√©todo de Runge-Kutta de tercer grado
%calculateApproximation:
%Obtiene los valores ingresados por el usuario en los campos de entrada.
%Convierte la cadena de la funci√≥n en una funci√≥n manejable utilizando str2func.
%Llama a la funci√≥n de Runge-Kutta de tercer grado con los par√°metros proporcionados.
%Muestra el resultado de la aproximaci√≥n en la etiqueta de resultado.
%rungeKutta3:
%Implementa el m√©todo de Runge-Kutta de tercer grado para resolver ecuaciones diferenciales.
%Inicializa las variables necesarias, incluyendo el vector de puntos de evaluaci√≥n y el vector para almacenar los resultados intermedios.
%Itera sobre cada punto en el intervalo y calcula los valores de  ùëò1 ùëò2 ùëò3‚Äã para actualizar el valor de ùë¶
%Actualiza y almacena el valor de ùë¶ y en cada iteraci√≥n. Convierte el resultado final a un valor num√©rico.
%Crea una gr√°fica de la soluci√≥n aproximada. 

function rungeKuttaUI()
    % Crear la figura de la interfaz con un t√≠tulo y tama√±o especificado
    fig = uifigure('Name', 'Runge-Kutta de Tercer Grado', 'Position', [100 100 450 400]);
    
    % Etiqueta y campo de entrada para la funci√≥n z
    lblFunction = uilabel(fig, 'Text', 'Funci√≥n (z):', 'Position', [20 340 100 22]);
    txtFunction = uieditfield(fig, 'text', 'Position', [130 340 290 22]);
    
    % Etiqueta y campo de entrada para el valor inicial y0
    lblInitialValue = uilabel(fig, 'Text', 'Valor Inicial (y0):', 'Position', [20 300 100 22]);
    txtInitialValue = uieditfield(fig, 'numeric', 'Position', [130 300 100 22]);
    
    % Etiqueta y campo de entrada para el l√≠mite inferior a
    lblLowerLimit = uilabel(fig, 'Text', 'L√≠mite Inferior (a):', 'Position', [20 260 100 22]);
    txtLowerLimit = uieditfield(fig, 'numeric', 'Position', [130 260 100 22]);
    
    % Etiqueta y campo de entrada para el l√≠mite superior b
    lblUpperLimit = uilabel(fig, 'Text', 'L√≠mite Superior (b):', 'Position', [20 220 100 22]);
    txtUpperLimit = uieditfield(fig, 'numeric', 'Position', [130 220 100 22]);
    
    % Etiqueta y campo de entrada para el tama√±o del paso h
    lblStepSize = uilabel(fig, 'Text', 'Tama√±o del Paso (h):', 'Position', [20 180 100 22]);
    txtStepSize = uieditfield(fig, 'numeric', 'Position', [130 180 100 22]);
    
    % Bot√≥n para calcular la aproximaci√≥n
    btnCalculate = uibutton(fig, 'push', 'Text', 'Calcular Aproximaci√≥n', 'Position', [130 140 150 22]);
    
    % Etiqueta para mostrar el resultado
    lblResult = uilabel(fig, 'Text', 'Resultado:', 'Position', [20 100 400 22], 'FontWeight', 'bold');
    
    % Funci√≥n que se ejecuta al presionar el bot√≥n
    btnCalculate.ButtonPushedFcn = @(btn, event) calculateApproximation(txtFunction, txtInitialValue, txtLowerLimit, txtUpperLimit, txtStepSize, lblResult);
end

% Funci√≥n para calcular la aproximaci√≥n usando el m√©todo de Runge-Kutta de tercer grado
function calculateApproximation(txtFunction, txtInitialValue, txtLowerLimit, txtUpperLimit, txtStepSize, lblResult)
    % Obtener los valores de los campos de entrada
    funcStr = txtFunction.Value;
    y0 = txtInitialValue.Value;
    a = txtLowerLimit.Value;
    b = txtUpperLimit.Value;
    h = txtStepSize.Value;
    
    % Convertir la cadena de la funci√≥n en una funci√≥n manejable
    z = str2func(['@(x,y)' funcStr]);
    
    % Llamar a la funci√≥n de Runge-Kutta de tercer grado
    resultado = rungeKutta3(z, y0, a, b, h);
    
    % Mostrar el resultado
    lblResult.Text = ['Resultado: ' num2str(resultado)];
end

% Funci√≥n que implementa el m√©todo de Runge-Kutta de tercer grado
function [resultado] = rungeKutta3(z, yo, a, b, h)
    format long; % Usar formato de n√∫mero largo
    syms x y; % Definir variables simb√≥licas
    inter = a:h:b; % Crear un vector de puntos de evaluaci√≥n
    f = 0; % Inicializar la variable de resultado
    bandera = []; % Inicializar el vector para almacenar los resultados intermedios
    
    % Iterar sobre cada punto en el intervalo
    for i = 1:length(inter)
        % Calcular los valores de k1, k2 y k3
        k1 = subs(z, {x, y}, {inter(i), yo});
        k2 = subs(z, {x, y}, {inter(i) + h/2, yo + (h/2) * k1});
        k3 = subs(z, {x, y}, {inter(i) + h, yo - h * k1 + 2 * h * k2});
        
        % Calcular el siguiente valor de y usando el m√©todo de Runge-Kutta de tercer grado
        y1 = yo + (h/6) * (k1 + 4 * k2 + k3);
        
        % Actualizar el valor de y y almacenar el resultado
        f = y1;
        yo = y1;
        bandera = [bandera f];
    end
    
    % Convertir el resultado a un valor num√©rico
    resultado = double(f);
    
    % Crear una figura para la gr√°fica
    figure();
    hold on;
    grid on;
    plot(inter, bandera);
    title('Soluci√≥n usando el m√©todo de Runge-Kutta de Tercer Grado');
    xlabel('x');
    ylabel('y');
end